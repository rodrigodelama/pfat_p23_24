
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\007\000\002\002" +
    "\005\000\002\003\004\000\002\003\005\000\002\004\004" +
    "\000\002\005\003\000\002\005\005\000\002\006\006\000" +
    "\002\007\004\000\002\007\005\000\002\010\005\000\002" +
    "\010\006\000\002\010\006\000\002\010\007\000\002\010" +
    "\007\000\002\012\003\000\002\012\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\006\000\002\011\006\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\006\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\020\004\001\002\000\004\044\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\010\010\021\011\001\002\000\014\016\031\022" +
    "\030\024\032\025\026\044\027\001\002\000\004\047\015" +
    "\001\002\000\004\002\uffff\001\002\000\004\010\010\001" +
    "\002\000\004\005\022\001\002\000\004\044\016\001\002" +
    "\000\006\004\020\005\ufffb\001\002\000\004\005\ufffc\001" +
    "\002\000\004\044\016\001\002\000\004\005\ufffa\001\002" +
    "\000\006\010\ufffe\047\015\001\002\000\004\010\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\005\141\001\002" +
    "\000\004\006\136\001\002\000\004\012\134\001\002\000" +
    "\026\006\050\015\053\026\041\033\043\034\047\036\044" +
    "\044\042\045\046\046\051\050\052\001\002\000\026\006" +
    "\050\015\053\026\041\033\043\034\047\036\044\044\042" +
    "\045\046\046\051\050\052\001\002\000\004\006\036\001" +
    "\002\000\004\011\034\001\002\000\004\005\035\001\002" +
    "\000\004\002\ufff9\001\002\000\004\044\037\001\002\000" +
    "\004\007\040\001\002\000\004\005\ufff5\001\002\000\026" +
    "\006\050\015\053\026\041\033\043\034\047\036\044\044" +
    "\042\045\046\046\051\050\052\001\002\000\046\004\uffef" +
    "\005\uffef\007\uffef\013\uffef\014\uffef\017\uffef\023\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\001\002\000\004\006" +
    "\120\001\002\000\026\006\050\015\053\026\041\033\043" +
    "\034\047\036\044\044\042\045\046\046\051\050\052\001" +
    "\002\000\034\013\055\014\070\017\114\030\060\031\061" +
    "\032\065\035\062\036\056\037\067\040\064\041\063\042" +
    "\057\043\066\001\002\000\046\004\uffe0\005\uffe0\007\uffe0" +
    "\013\uffe0\014\uffe0\017\uffe0\023\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\001\002\000\004\006\111\001\002\000" +
    "\026\006\050\015\053\026\041\033\043\034\047\036\044" +
    "\044\042\045\046\046\051\050\052\001\002\000\046\004" +
    "\uffed\005\uffed\007\uffed\013\uffed\014\uffed\017\uffed\023\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\001\002\000\046" +
    "\004\uffe5\005\uffe5\007\uffe5\013\uffe5\014\uffe5\017\uffe5\023" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002\000" +
    "\026\006\050\015\053\026\041\033\043\034\047\036\044" +
    "\044\042\045\046\046\051\050\052\001\002\000\046\004" +
    "\uffdd\005\uffdd\007\uffdd\013\uffdd\014\uffdd\017\uffdd\023\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\062\036\056\037" +
    "\067\040\064\041\063\042\057\043\066\001\002\000\026" +
    "\006\050\015\053\026\041\033\043\034\047\036\044\044" +
    "\042\045\046\046\051\050\052\001\002\000\030\006\050" +
    "\015\053\026\041\032\104\033\043\034\047\036\044\044" +
    "\042\045\046\046\051\050\052\001\002\000\026\006\050" +
    "\015\053\026\041\033\043\034\047\036\044\044\042\045" +
    "\046\046\051\050\052\001\002\000\026\006\050\015\053" +
    "\026\041\033\043\034\047\036\044\044\042\045\046\046" +
    "\051\050\052\001\002\000\026\006\050\015\053\026\041" +
    "\033\043\034\047\036\044\044\042\045\046\046\051\050" +
    "\052\001\002\000\026\006\050\015\053\026\041\033\043" +
    "\034\047\036\044\044\042\045\046\046\051\050\052\001" +
    "\002\000\026\006\050\015\053\026\041\033\043\034\047" +
    "\036\044\044\042\045\046\046\051\050\052\001\002\000" +
    "\026\006\050\015\053\026\041\033\043\034\047\036\044" +
    "\044\042\045\046\046\051\050\052\001\002\000\026\006" +
    "\050\015\053\026\041\033\043\034\047\036\044\044\042" +
    "\045\046\046\051\050\052\001\002\000\026\006\050\015" +
    "\053\026\041\033\043\034\047\036\044\044\042\045\046" +
    "\046\051\050\052\001\002\000\026\006\050\015\053\026" +
    "\041\033\043\034\047\036\044\044\042\045\046\046\051" +
    "\050\052\001\002\000\026\006\050\015\053\026\041\033" +
    "\043\034\047\036\044\044\042\045\046\046\051\050\052" +
    "\001\002\000\046\004\uffde\005\uffde\007\uffde\013\055\014" +
    "\uffde\017\uffde\023\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\035\062\036\056\037\067\040\064\041\063\042\057\043" +
    "\066\001\002\000\046\004\uffea\005\uffea\007\uffea\013\uffea" +
    "\014\uffea\017\uffea\023\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\001\002\000\046\004\uffdc\005\uffdc\007\uffdc\013" +
    "\uffdc\014\uffdc\017\uffdc\023\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\035\062\036\056\037\067\040\064\041\063\042" +
    "\057\043\uffdc\001\002\000\046\004\uffe2\005\uffe2\007\uffe2" +
    "\013\055\014\070\017\uffe2\023\uffe2\027\uffe2\030\060\031" +
    "\uffe2\032\uffe2\035\062\036\056\037\067\040\064\041\063" +
    "\042\057\043\066\001\002\000\046\004\uffe9\005\uffe9\007" +
    "\uffe9\013\uffe9\014\uffe9\017\uffe9\023\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\001\002\000\046\004\uffda\005\uffda" +
    "\007\uffda\013\uffda\014\uffda\017\uffda\023\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\035\062\036\056\037\067\040\064" +
    "\041\uffda\042\uffda\043\uffda\001\002\000\046\004\uffec\005" +
    "\uffec\007\uffec\013\uffec\014\uffec\017\uffec\023\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\035\uffec\036\uffec\037\067\040" +
    "\064\041\uffec\042\uffec\043\uffec\001\002\000\046\004\uffe3" +
    "\005\uffe3\007\uffe3\013\055\014\070\017\uffe3\023\uffe3\027" +
    "\uffe3\030\060\031\uffe3\032\065\035\062\036\056\037\067" +
    "\040\064\041\063\042\057\043\066\001\002\000\046\004" +
    "\uffd9\005\uffd9\007\uffd9\013\055\014\070\017\uffd9\023\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\062\036\056\037" +
    "\067\040\064\041\063\042\057\043\066\001\002\000\046" +
    "\004\uffdb\005\uffdb\007\uffdb\013\uffdb\014\uffdb\017\uffdb\023" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035\062\036\056" +
    "\037\067\040\064\041\uffdb\042\uffdb\043\uffdb\001\002\000" +
    "\046\004\uffeb\005\uffeb\007\uffeb\013\uffeb\014\uffeb\017\uffeb" +
    "\023\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\036" +
    "\uffeb\037\067\040\064\041\uffeb\042\uffeb\043\uffeb\001\002" +
    "\000\026\006\050\015\053\026\041\033\043\034\047\036" +
    "\044\044\042\045\046\046\051\050\052\001\002\000\046" +
    "\004\uffe1\005\uffe1\007\uffe1\013\055\014\070\017\uffe1\023" +
    "\uffe1\027\uffe1\030\060\031\uffe1\032\uffe1\035\062\036\056" +
    "\037\067\040\064\041\063\042\057\043\066\001\002\000" +
    "\046\004\uffdf\005\uffdf\007\uffdf\013\uffdf\014\uffdf\017\uffdf" +
    "\023\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035\062\036" +
    "\056\037\067\040\064\041\063\042\057\043\066\001\002" +
    "\000\034\007\110\013\055\014\070\030\060\031\061\032" +
    "\065\035\062\036\056\037\067\040\064\041\063\042\057" +
    "\043\066\001\002\000\046\004\uffee\005\uffee\007\uffee\013" +
    "\uffee\014\uffee\017\uffee\023\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\001\002\000\026\006\050\015\053\026\041" +
    "\033\043\034\047\036\044\044\042\045\046\046\051\050" +
    "\052\001\002\000\034\007\113\013\055\014\070\030\060" +
    "\031\061\032\065\035\062\036\056\037\067\040\064\041" +
    "\063\042\057\043\066\001\002\000\046\004\uffe6\005\uffe6" +
    "\007\uffe6\013\uffe6\014\uffe6\017\uffe6\023\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\001\002\000\014\016\031\022" +
    "\030\024\032\025\026\044\027\001\002\000\004\011\116" +
    "\001\002\000\004\005\ufff3\001\002\000\046\004\uffe8\005" +
    "\uffe8\007\uffe8\013\uffe8\014\uffe8\017\uffe8\023\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000\026\006\050" +
    "\015\053\026\041\033\043\034\047\036\044\044\042\045" +
    "\046\046\051\050\052\001\002\000\034\007\122\013\055" +
    "\014\070\030\060\031\061\032\065\035\062\036\056\037" +
    "\067\040\064\041\063\042\057\043\066\001\002\000\046" +
    "\004\uffe7\005\uffe7\007\uffe7\013\uffe7\014\uffe7\017\uffe7\023" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\001\002\000" +
    "\036\004\126\013\055\014\070\027\ufff1\030\060\031\061" +
    "\032\065\035\062\036\056\037\067\040\064\041\063\042" +
    "\057\043\066\001\002\000\004\027\125\001\002\000\046" +
    "\004\uffe4\005\uffe4\007\uffe4\013\uffe4\014\uffe4\017\uffe4\023" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\001\002\000" +
    "\026\006\050\015\053\026\041\033\043\034\047\036\044" +
    "\044\042\045\046\046\051\050\052\001\002\000\004\027" +
    "\ufff0\001\002\000\034\013\055\014\070\023\131\030\060" +
    "\031\061\032\065\035\062\036\056\037\067\040\064\041" +
    "\063\042\057\043\066\001\002\000\014\016\031\022\030" +
    "\024\032\025\026\044\027\001\002\000\004\011\133\001" +
    "\002\000\004\005\ufff2\001\002\000\026\006\050\015\053" +
    "\026\041\033\043\034\047\036\044\044\042\045\046\046" +
    "\051\050\052\001\002\000\034\005\ufff6\013\055\014\070" +
    "\030\060\031\061\032\065\035\062\036\056\037\067\040" +
    "\064\041\063\042\057\043\066\001\002\000\004\044\137" +
    "\001\002\000\004\007\140\001\002\000\004\005\ufff4\001" +
    "\002\000\016\011\ufff8\016\031\022\030\024\032\025\026" +
    "\044\027\001\002\000\004\011\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\011\001\001" +
    "\000\006\007\032\010\024\001\001\000\006\003\012\004" +
    "\013\001\001\000\002\001\001\000\004\006\023\001\001" +
    "\000\002\001\001\000\004\005\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\020\001\001\000\002" +
    "\001\001\000\006\003\022\004\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\127\001\001\000\004\011" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\122\012\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\053\001\001\000\002\001\001\000\004" +
    "\011\105\001\001\000\004\011\102\001\001\000\004\011" +
    "\101\001\001\000\004\011\100\001\001\000\004\011\077" +
    "\001\001\000\004\011\076\001\001\000\004\011\075\001" +
    "\001\000\004\011\074\001\001\000\004\011\073\001\001" +
    "\000\004\011\072\001\001\000\004\011\071\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\114\010\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\122\012\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\131\010\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\141\010\024\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void syntax_error(Symbol s) {
    report_error("Error de sintaxis en linea " + s.left, null);
  }
  

  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    report_fatal_error("", null);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pf2024 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		pf2024 start_val = (pf2024)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pf2024 ::= PROG IDENT DECL LDecl Body 
            {
              pf2024 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LDecl ld = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Prog(i, d, ld, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pf2024",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pf2024 ::= PROG IDENT Body 
            {
              pf2024 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Prog($2, $3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pf2024",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDecl ::= Decl PC 
            {
              LDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new LDecl1(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecl ::= Decl PC LDecl 
            {
              LDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LDecl ld = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LDecl2(d, ld); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= TYPE IdentList 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentList il = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Decl(t, il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IdentList ::= IDENT 
            {
              IdentList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new IdentList1(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IdentList ::= IDENT COMA IdentList 
            {
              IdentList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentList il = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new IdentList2(i, il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Body ::= BEGIN StatementList END PC 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Body(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StatementList ::= Statement PC 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new StatementList1(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StatementList ::= Statement PC StatementList 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new StatementList2(s, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= IDENT ASIG Exp 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Statement1(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= PRINT_I PAREN IDENT TESIS 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Statement2(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= PRINT_B PAREN IDENT TESIS 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Statement3(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= IF Exp THEN StatementList END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Statement4(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= WHILE Exp DO StatementList END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Statement5(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ExpList ::= Exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpList1(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ExpList ::= Exp COMA ExpList 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpList2(e, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= IDENT 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Parentesis(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= CINT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstanteEntera(n.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Suma(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Menos(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= Exp MUL Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Multiplicacion(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Division(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= MENOS Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Opuesto(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= CARD PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Card(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= LOWEST_ELEM PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new LowestElem(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= EMPTYSET 
            {
              Exp RESULT =null;
		RESULT=new ConjuntoVacio(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= BRAC ExpList KET 
            {
              Exp RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList k = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Conjunto(k); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp UNION Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Union(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp INTERSEC Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Interseccion(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp MENOS INTERSEC Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Diferencia(e1, new Interseccion(e1, e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= CLOG 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstanteBooleana(c.booleanValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp OR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Not(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp IGUAL Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Igual(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp MENOR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Menor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= Exp MAYOR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Mayor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp IN Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new In(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
