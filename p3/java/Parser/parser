package Parser;

import java_cup.runtime.*;
import AST.*;

parser code {:
  public void syntax_error(Symbol s) {
    report_error("Error de sintaxis en linea " + s.left + "\n\n", null);
  }

  public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    report_fatal_error("", null);
  }
:};

// Terminales
terminal COMA, PC, PAREN, TESIS, BEGIN, END, ASIG, AND, OR, NOT, IF, THEN, PROG,
          DECL, WHILE, DO, PRINT_I, PRINT_B, BRAC, KET, IN, UNION, INTERSEC, CARD,
          LOWEST_ELEM, MAS, MENOS, MUL, DIV, MAYOR, MENOR, IGUAL, EMPTYSET, OPUESTO;

terminal Integer CINT, TYPE;
terminal String IDENT;
terminal Boolean CLOG; // possibly have to add TYPE

// No terminales
// Declararemos una interfaz por cada no terminal
non terminal Prog Prog;
non terminal IdentList IdentList;
non terminal StatementList StatementList;
non terminal Body Body;
non terminal Statement Statement;
non terminal Exp Exp;
non terminal LDecl LDecl;
non terminal Decl Decl;
non terminal ExpList ExpList;

// Reglas de precedencia
precedence left UNION;
precedence left INTERSEC;
precedence left IN;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL;
precedence left MENOR, MAYOR;
precedence left MAS, MENOS;
precedence left MUL, DIV;
precedence left OPUESTO; // - (opuesto)

// Reglas de produccion
start with Prog; // Simbolo Inicial

Prog ::= PROG IDENT:i DECL LDecl:ld Body:b {:RESULT=new Prog1(i, ld, b); :} 
       | PROG IDENT:i Body:b {:RESULT=new Prog2(i, b); :} ;

LDecl ::= Decl:d PC {:RESULT=new LDecl1(d); :}
        | Decl:d PC LDecl:ld {:RESULT=new LDecl2(d, ld); :} ;

Decl ::= TYPE:t IdentList:il {:RESULT=new Decl(t.intValue(), il); :} ;

IdentList ::= IDENT:i {:RESULT=new IdentList1(i); :}
            | IDENT:i COMA IdentList:il {:RESULT=new IdentList2(i, il); :} ;

Body ::= BEGIN StatementList:sl END PC {:RESULT=new Body(sl); :} ;

StatementList ::= Statement:s PC {:RESULT=new StatementList1(s); :}
                | Statement:s PC StatementList:sl {:RESULT=new StatementList2(s, sl); :} ;

Statement ::= IDENT:i ASIG Exp:e {:RESULT=new Statement1(i, e); :}
            | PRINT_I PAREN IDENT:i TESIS {:RESULT=new Statement2(i); :}
            | PRINT_B PAREN IDENT:i TESIS {:RESULT=new Statement3(i); :}
            | IF Exp:e THEN StatementList:sl END {:RESULT=new Statement4(e, sl); :}
            | WHILE Exp:e DO StatementList:sl END {:RESULT=new Statement5(e, sl); :} ;

//Lista de expresiones
ExpList ::= Exp:e {:RESULT=new ExpList1(e); :}
          | Exp:e COMA ExpList:el {:RESULT=new ExpList2(e, el); :} ;

//Expresiones sin tipo definido
Exp ::= IDENT:s {:RESULT=new Variable(s); :} //Un identificador que sea el nombre de una variable. Será del tipo de la variable.
      | PAREN Exp:e TESIS {:RESULT=new Parentesis(e); :} //Una expresion entre parentesis. Será del tipo de la expresion contenida dentro de los parentesis.
      
      //Expresiones de tipo int
      | CINT:n {:RESULT=new ConstanteEntera(n.intValue()); :} //Una constante expresada en decimal.
      | Exp:e1 MAS Exp:e2 {:RESULT=new Suma(e1, e2); :} //Una suma de expresiones de tipo int utilizando el operador "+".
      | Exp:e1 MENOS Exp:e2 {:RESULT=new RestaODiff(e1, e2); :} //Una resta de expresiones de tipo int utilizando el operador "-".
      | Exp:e1 MUL Exp:e2 {:RESULT=new Multiplicacion(e1, e2); :} //Una multiplicacion de expresiones de tipo int utilizando el operador "*".
      | Exp:e1 DIV Exp:e2 {:RESULT=new Division(e1, e2); :} //Una division de expresiones de tipo int utilizando el operador "/".
      | MENOS Exp:e {:RESULT=new Opuesto(e); :} %prec OPUESTO //El opuesto de una expresion de tipo int, utilizando el símbolo habitual "-" antes de la expresion.
      | CARD PAREN Exp:e TESIS {:RESULT=new Card(e); :} //El número de elementos de un conjunto de enteros, utilizando la funcion card.
      | LOWEST_ELEM PAREN Exp:e TESIS {:RESULT=new LowestElem(e); :} //El menor elemento de un conjunto de enteros, utilizando la funcion lowest_elem.
          //Nota: el codigo generado en la práctica 3 debe lanzar una excepcioncuando lowest_elem sea aplicado al conjunto vacío.
      
      //Expresiones de tipo intset (conjunto de enteros)
      | BRAC KET {:RESULT=new ConjuntoVacio(); :} //Un conjunto vacío, utilizando los símbolos "{" y "}" para delimitar la lista de elementos.
      | EMPTYSET {:RESULT=new ConjuntoVacio(); :} //Un conjunto vacío, utilizando el símbolo emptyset.
            /*
              Una expresion que comienza por {, termina por } y contiene una lista de subexpresiones de tipo int,
              separadas por comas. Representa un conjunto de enteros cuyos elementos son los enteros resultado de
              evaluar las subexpresiones.
            */
      | BRAC ExpList:el KET {:RESULT=new Conjunto(el); :} //Un conjunto de enteros, utilizando los símbolos "{" y "}" para delimitar la lista de elementos.
          //TODO: Repasar ExpList, tiene sentido?
      | Exp:e1 UNION Exp:e2 {:RESULT=new Union(e1, e2); :} //La union de dos conjuntos de enteros, utilizando el operador union.
      | Exp:e1 INTERSEC Exp:e2 {:RESULT=new Interseccion(e1, e2); :} //La interseccion de dos conjuntos de enteros, utilizando el operador intersec.
          // exp DIFF exp ES LA MISMA REGLA QUE MENOS, ya veremos como se soluciona más adelante
      
      //Expresiones de tipo bool
      | CLOG:c {:RESULT=new ConstanteBooleana(c.booleanValue()); :} //Una constante de tipo bool.
      | Exp:e1 AND Exp:e2 {:RESULT=new And(e1, e2); :} //La conjuncion de dos expresiones logicas, utilizando el operador and.
      | Exp:e1 OR Exp:e2 {:RESULT=new Or(e1, e2); :} //La disyuncion de dos expresiones logicas, utilizando el operador or.
      | NOT Exp:e1 {:RESULT=new Not(e1); :} //Una expresion logica negada, utilizando el operador not antes de la expresion logica.
      | Exp:e1 IGUAL Exp:e2 {:RESULT=new Igual(e1, e2); :} //La igualdad entre dos expresiones, utilizando el operador "=".
      | Exp:e1 MENOR Exp:e2 {:RESULT=new Menor(e1, e2); :} //La comparacion entre 2 expresiones de tipo int utilizando el operador "<" (menor que).
      | Exp:e1 MAYOR Exp:e2 {:RESULT=new Mayor(e1, e2); :} //La comparacion entre 2 expresiones de tipo int utilizando el operador ">".
      | Exp:e1 IN Exp:e2 {:RESULT=new In(e1, e2); :} ;//Una expresion que pertenezca al lenguaje definido por la expresion lingüística <Exp> in <Exp>
                                                      //donde la primera subexpresion ha de ser de tipo int y la segunda de tipo intset. Devuelve true
                                                      //si el entero resultado de evaluar la primera subexpresion pertenece al conjunto resultado de
                                                      //evaluar la segunda y false en caso contrario.

//Nota: para definir las expresiones puede ser necesario definir algún símbolo no terminal adicional en la gramática. --> era ExpList
